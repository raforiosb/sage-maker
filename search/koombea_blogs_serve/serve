#!/usr/bin/env python
import os, subprocess, multiprocessing, signal, time
from koombea_serve.config.logger import logger
from koombea_serve.cronjob.cron import execute_cache

NUM_CPU = multiprocessing.cpu_count()
MODEL_SERVER_TIMEOUT = os.environ.get("MODEL_SERVER_TIMEOUT", 300)
MODEL_SERVER_WORKERS = int(os.environ.get("MODEL_SERVER_WORKERS", NUM_CPU))


def sigterm_handler(nginx_pid, gunicorn_pid):
    """Handling nginx pid and gunicorn pid to terminate
    Args:
        nginx_pid (pid): nginx signal pid
        gunicorn_pid (pid): gunicorn signal pid
    """
    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError as e:
        logger.error(f"Error: {e}")

    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError as e:
        logger.error(f"Error: {e}")


def start_slave_process(cmd):
    """
    Start process
    Args:
        cmd -- command to execute this will be redis-server, celery-workers, celery-beat
    Returns:
        p -- process
    """
    p = subprocess.Popen(cmd, shell=True, stderr=subprocess.STDOUT)
    # Sleep
    time.sleep(10)
    if p.poll() is not None:
        raise RuntimeError("Could not start {0}".format(cmd))
    else:
        logger.info("{0} started succesfully".format(cmd))
    return p


def main():
    logger.debug("Starting app with {} workers".format(MODEL_SERVER_WORKERS))

    # start redis server
    start_slave_process(cmd="redis-server /etc/redis/redis.conf")
    # start celery process.
    start_slave_process(
        cmd="celery -A koombea_serve.cronjob.celery_app worker --loglevel INFO"
    )
    start_slave_process(
        cmd="celery -A koombea_serve.cronjob.celery_app beat --loglevel INFO"
    )
    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(["ln", "-sf", "/dev/stdout", "/var/log/nginx/access.log"])
    subprocess.check_call(["ln", "-sf", "/dev/stderr", "/var/log/nginx/error.log"])

    # nginx process
    nginx = subprocess.Popen(["nginx", "-c", "/opt/ml/input/config/nginx.conf"])
    # start gunicorn process
    gunicorn = subprocess.Popen(
        [
            "gunicorn",
            "--timeout",
            str(MODEL_SERVER_TIMEOUT),
            "-k",
            "uvicorn.workers.UvicornWorker",
            "-b",
            "unix:/tmp/gunicorn.sock",
            "-w",
            str(MODEL_SERVER_WORKERS),
            "koombea_serve.api:app",
            "--log-level",
            "INFO",
        ]
    )
    logger.debug("gunicorn pid signal id:" + str(gunicorn.pid))

    # Test celery app
    execute_cache.delay("Caching db")

    # take care of sigterm signals for our nginx and gunicorn process
    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

    # If either subprocess exits, so do we.
    pids = set([nginx.pid, gunicorn.pid])
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    # sigterm handler
    sigterm_handler(nginx.pid, gunicorn.pid)

    logger.info("Inference server exiting")


if __name__ == "__main__":
    main()
